#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100
typedef struct {
    int data[MAX];
    int top;
} Stack;

void initialize(Stack *stack) {
	stack->top = -1;
}
int isEmpty(Stack *stack) {
   return stack->top == -1;
}
int isFull(Stack *stack) {
    return stack->top == MAX-1;
}
void push(Stack *stack, int value) {
    if(isFull(stack)) printf("Stack overflow\n");
	else stack->data[++stack->top] = value;
}
int pop(Stack *stack) {
    if(isEmpty(stack)){
		printf("Stack underflow\n");
		return -1;
	}else return stack->data[stack->top--];
}
void displayStack(Stack *stack) {
    if(isEmpty(stack)){
		printf("Stack is empty\n");
	}
	else{
		printf("Stack elements: ");
		for(int i=0;i<=stack->top;i++){
			printf("%d ",stack->data[i]);
		}
		printf("\n");
	}
}
void checkPal(char *str) {
    int i,n = strlen(str);
	Stack stack;
	initialize(&stack);
	int pal=1;
	for(i=0;i<n;i++) push(&stack,str[i]);
	for(i=0;i<n;i++){
		 if(pop(&stack) != str[i]) pal=0 ;
	}
	if(pal) printf("Palindrome\n");
	else printf("Not a palindrome\n");
}

int main() {
    Stack s; initialize(&s); int ch, v; char str[MAX];
    while (1) {
        printf("1.Push 2.Pop 3.Palindrome 4.Display 5.Exit: "); scanf("%d", &ch);
        if (ch == 1) { printf("Enter value: "); scanf("%d", &v); push(&s, v); }
        else if (ch == 2 && (v = pop(&s)) != -1) printf("Popped: %d\n", v);
        else if (ch == 3) { printf("Enter string: "); scanf("%s", str); checkPal(str); }
        else if (ch == 4) displayStack(&s);
        else if (ch == 5) exit(0);
        else printf("Invalid\n");
    }
}
