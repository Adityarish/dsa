#include<stdio.h>
#include<stdlib.h>

struct Node{
    int coeff, deg;
    struct Node *next;
};
typedef struct Node* Poly;

Poly create(int coeff, int deg){
    Poly newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->coeff = coeff;
    newNode->deg = deg;
    newNode->next = NULL;
    return newNode;
}

Poly insert(Poly tail, int coeff, int deg){
    Poly newNode = create(coeff, deg);
    if(tail == NULL){
        newNode->next = newNode;
        return newNode;
    }
    newNode->next = tail->next;
    tail->next = newNode;
    return newNode;
}

Poly input(int n){
    int coeff, deg;
    Poly tail = NULL;
    for(int i = 0;i<n;i++){
    scanf("%d %d",&coeff, &deg);
    tail = insert(tail, coeff, deg);
    }
    return tail->next;
}

void display(Poly head){
    if(head){
        Poly temp = head;
        do{
            printf("%dx^%d", temp->coeff, temp->deg);
            temp = temp->next;
            if(temp != head) printf(" + ");
        }while(temp != head);
    }
    printf("\n");
}

Poly add(Poly head1, Poly head2){
    Poly resTail = NULL, mover1 = head1, mover2 = head2;
    do{
        if(mover1->deg == mover2->deg){
            resTail = insert(resTail, mover1->coeff+mover2->coeff, mover1->deg);
            mover1 = mover1->next;
            mover2 = mover2->next;
        }else if(mover1->deg > mover2 ->deg){
            resTail = insert(resTail, mover1->coeff, mover1->deg);
            mover1 = mover1->next;
        }else {
            resTail = insert(resTail, mover2->coeff,mover2->deg);
            mover2 = mover2->next;
        }
    }while(mover1 != head1 && mover2 != head2);
    while(mover1!= head1){
        resTail = insert(resTail, mover1->coeff, mover1->deg);
        mover1 = mover1->next;
    }
    while(mover2!= head2){
        resTail = insert(resTail, mover2->coeff, mover2->deg);
        mover2 = mover2->next;
    }
    return resTail ? resTail->next : NULL;
}
int main(){
    int n1, n2;
    scanf("%d",&n1);
    Poly head1 = input(n1);
    scanf("%d",&n2);
    Poly head2 = input(n2);
    display(head1);
    display(head2);
    Poly resHead = add(head1,head2);
    display(resHead);
    return 0;
}
